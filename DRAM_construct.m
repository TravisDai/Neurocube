function [ DRAM ] = DRAM_construct( DRAM_type )
%% Constructor for DRAM depending on a given architecture


DRAM_size = 2^30;       % virtual size of DRAM (1GB) per channel

% can add any DRAM_type by setting up the corresponding access latency
if strcmp(DRAM_type, 'DDR3')
    num_channels    = 16;
    page_size       = 2^10;    % 1KB page (column size)
    word_size       = 2^2;     % 4B (equivalent to data bus-width)
    MAX_words       = DRAM_size/word_size;
    num_cols        = page_size/word_size;
    lat_access      = 20;      % DDR3-1600J: t_CAS (10) + t_RCD (10)
    interc_delay    = 10;      % interconnection delay
else    % TODO: add more DRAM specifications (HMC, WideIO, ...)
    error('DRAM TYPE NOT RECOGNIZED!');
end




% define fields required for DRAM struct
field1      = 't_access';   % DRAM access latency (in clock cycles)
field2      = 't_interc';   % DRAM->ROUTER interconnect delay
field3      = 'packet';     % DRAM packet (READ or WRITE)
field4      = 'busy';       % 2: WRITE, 1: READ, 0: available for READ/WRITE

for idx = 1:num_channels
    value1{1,idx}   = lat_access;
    value2{1,idx}   = interc_delay;
    value3{1,idx}   = zeros(1,5);      % [src, dst, gen_time, packetID, data_type]; this is generated by internal packet generator (MEM_CENTRIC)
                                       % data_type (1: A template, 2: cell state, 3: offset)
    value4{1,idx}   = 0;
end

DRAM = struct(field1,value1, field2,value2, field3,value3, field4,value4);

end

